[{"model": "metadata.stepdefinition", "pk": 1, "fields": {"workflow": 1, "order": 1, "sql_query": "SELECT b.nimi as company_name, b.ariregistri_kood as company_code, \r\nconcat('J_', company_code, '_V') as company_key\r\nFROM 'ettevotja_rekvisiidid__osanikud.json' b\r\nUNION\r\nSELECT nimi as company_name, ariregistri_kood as company_code,\r\nconcat('J_', company_code, '_V') as company_key \r\nFROM 'ettevotja_rekvisiidid__kandevalised_isikud.json'", "result_filename": "companies.parquet", "validation_schema": null, "engine": "SQL"}}, {"model": "metadata.stepdefinition", "pk": 2, "fields": {"workflow": 1, "order": 2, "sql_query": "SELECT B.registrikood as company_number, A.vaartus as assets_value FROM \"4.2022_aruannete_elemendid_kuni_31032024.csv\" \r\nA join \"1.aruannete_yldandmed_kuni_31032024.csv\" B ON A.report_id = B.report_id \r\nWHERE (A.tabel = 'Bilanss' OR A.tabel = 'Konsolideeritud bilanss') and A.elemendi_label = 'Varad'", "result_filename": "assets.parquet", "validation_schema": null, "engine": "SQL"}}, {"model": "metadata.stepdefinition", "pk": 3, "fields": {"workflow": 1, "order": 3, "sql_query": "SELECT unnest.osanikud.isiku_tyyp as owner_type, unnest.osanikud.eesnimi as owner_firstname, unnest.osanikud.nimi_arinimi as owner_name, unnest.osanikud.isikukood_registrikood as owner_number, unnest.osanikud.valis_kood as owner_foreign_number, unnest.osanikud.synniaeg as owner_bdate  FROM 'ettevotja_rekvisiidid__osanikud.json' b, unnest(b.osanikud)\r\nUNION \r\nSELECT k.kaardivalised_isikud.isiku_tyyp as owner_type, k.kaardivalised_isikud.eesnimi as owner_firstname, k.kaardivalised_isikud.nimi_arinimi as owner_name, k.kaardivalised_isikud.isikukood_registrikood as owner_number, k.kaardivalised_isikud.valis_kood as owner_foreign_number, k.kaardivalised_isikud.synniaeg as owner_bdate from 'ettevotja_rekvisiidid__kandevalised_isikud.json', unnest(kaardivalised_isikud) k where k.kaardivalised_isikud.isiku_roll = 'S'", "result_filename": "owners.parquet", "validation_schema": null, "engine": "SQL"}}, {"model": "metadata.stepdefinition", "pk": 4, "fields": {"workflow": 1, "order": -1, "sql_query": "SELECT pull_file('https://avaandmed.ariregister.rik.ee/sites/default/files/4.2022_aruannete_elemendid_kuni_31032024.zip', '4.2022_aruannete_elemendid_kuni_31032024.csv')", "result_filename": "4.2022_aruannete_elemendid_kuni_31032024.zip", "validation_schema": null, "engine": "SQL"}}, {"model": "metadata.stepdefinition", "pk": 5, "fields": {"workflow": 1, "order": -1, "sql_query": "SELECT pull_file('https://avaandmed.ariregister.rik.ee/sites/default/files/avaandmed/ettevotja_rekvisiidid__osanikud.json.zip', 'ettevotja_rekvisiidid__osanikud.json')", "result_filename": "ettevotja_rekvisiidid__osanikud.json.zip", "validation_schema": null, "engine": "SQL"}}, {"model": "metadata.stepdefinition", "pk": 6, "fields": {"workflow": 1, "order": -1, "sql_query": "SELECT pull_file('https://avaandmed.ariregister.rik.ee/sites/default/files/1.aruannete_yldandmed_kuni_31032024.zip', '1.aruannete_yldandmed_kuni_31032024.csv')", "result_filename": "1.aruannete_yldandmed_kuni_31032024.zip", "validation_schema": null, "engine": "SQL"}}, {"model": "metadata.stepdefinition", "pk": 7, "fields": {"workflow": 1, "order": 4, "sql_query": "SELECT \r\n    b.ariregistri_kood as company_number, \r\n    unnest.osanikud.isiku_tyyp as owner_type, \r\n    CASE unnest.osanikud.isiku_tyyp WHEN 'F' THEN concat(unnest.osanikud.eesnimi, ' ', unnest.osanikud.nimi_arinimi) WHEN 'J' THEN unnest.osanikud.nimi_arinimi END as owner_name, \r\n    unnest.osanikud.isikukood_registrikood as owner_number, \r\n    unnest.osanikud.valis_kood as owner_foreign_number, \r\n    unnest.osanikud.valis_kood_riik as owner_foreign_country,\r\n    unnest.osanikud.synniaeg as owner_bdate,\r\n    CAST(unnest.osanikud.osaluse_protsent AS DECIMAL) AS ownership_size,\r\n    strptime(unnest.osanikud.algus_kpv, '%d.%m.%Y')::DATE as valid_from, \r\n    strptime(unnest.osanikud.lopp_kpv, '%d.%m.%Y')::DATE as valid_to,\r\nconcat(owner_type, '_', owner_number, '_V', owner_foreign_number) as owner_key\r\nFROM 'ettevotja_rekvisiidid__osanikud.json' b, unnest(b.osanikud)\r\nUNION ALL\r\nSELECT \r\n    ariregistri_kood as company_number,\r\n    k.kaardivalised_isikud.isiku_tyyp as owner_type,\r\n    CASE owner_type WHEN 'F' THEN concat(k.kaardivalised_isikud.eesnimi, ' ', k.kaardivalised_isikud.nimi_arinimi) WHEN 'J' THEN k.kaardivalised_isikud.nimi_arinimi END as owner_name,\r\n    k.kaardivalised_isikud.isikukood_registrikood as owner_number, \r\n    k.kaardivalised_isikud.valis_kood as owner_foreign_number, \r\n    k.kaardivalised_isikud.valis_kood_riik as owner_foreign_country,\r\n    k.kaardivalised_isikud.synniaeg as owner_bdate,\r\n    CAST(k.kaardivalised_isikud.osaluse_protsent AS DECIMAL) as ownership_size,\r\n    strptime(k.kaardivalised_isikud.algus_kpv::STRING, '%d.%m.%Y')::DATE as valid_from,\r\n    strptime(k.kaardivalised_isikud.lopp_kpv::STRING, '%d.%m.%Y')::DATE as valid_to,\r\n    concat(owner_type, '_', owner_number, '_V', owner_foreign_number) as owner_key\r\nFROM 'ettevotja_rekvisiidid__kandevalised_isikud.json', unnest(kaardivalised_isikud) k where k.kaardivalised_isikud.isiku_roll = 'S'", "result_filename": "ownerships.parquet", "validation_schema": null, "engine": "SQL"}}, {"model": "metadata.stepdefinition", "pk": 9, "fields": {"workflow": 1, "order": 8, "sql_query": "SELECT m.owner_key as enterprise_owner_key, un.also_owns as company_number FROM (\r\n    SELECT t.owner_key, list_distinct(flatten(list(t.also_ownes))) as also_owns FROM 'ownership_initial_tree.parquet' t\r\n    JOIN 'consortiums.parquet' c on c.owner_key = t.owner_key\r\n    GROUP BY t.owner_key\r\n) m, unnest(also_owns) un", "result_filename": "ownership_tree.parquet", "validation_schema": null, "engine": "SQL"}}, {"model": "metadata.stepdefinition", "pk": 10, "fields": {"workflow": 1, "order": 7, "sql_query": "WITH RECURSIVE ownerships AS (\r\nSELECT\r\n        company_number::STRING as company_number,\r\n        owner_number::STRING as owner_number,\r\n        owner_type,\r\n        ownership_size,\r\n        ARRAY[company_number::STRING] AS full_also_ownes,\r\n        CASE WHEN ownership_size::DECIMAL > 50 THEN ARRAY[company_number::STRING] ELSE ARRAY[] END AS also_ownes,\r\n        company_number::STRING as appen,\r\n        'firstone' as levelindicator,\r\n        len(also_ownes) as depth,\r\n        owner_key\r\n    FROM\r\n        'ownerships.parquet'\r\n    WHERE\r\n        --owner_type = 'J'\r\n        -- and \r\n        ownership_size > 50\r\n    UNION ALL\r\n    SELECT\r\n        o.company_number::STRING as company_number,\r\n        o.owner_number::STRING  as owner_number,\r\n        o.owner_type,\r\n        o.ownership_size,\r\n        list_append(p.full_also_ownes, o.company_number::STRING) as full_also_ownes,\r\n        CASE WHEN o.ownership_size::DECIMAL > 50 THEN list_append(p.also_ownes, o.company_number::STRING) ELSE p.also_ownes END as also_ownes,\r\n        p.also_ownes as appen,\r\n        p.owner_number as levelindicator,\r\n        len(also_ownes)+1 as depth,\r\n        o.owner_key\r\n    FROM\r\n        \r\n        ownerships p\r\n    JOIN\r\n        'ownerships.parquet' o\r\n    ON\r\n        p.owner_number::STRING = o.company_number::STRING\r\n    WHERE\r\n        o.ownership_size > 50 and\r\n        --o.owner_type = 'J' AND\r\n        not list_contains(full_also_ownes, CAST(o.owner_number AS STRING))\r\n        \r\n)\r\nSELECT * FROM ownerships", "result_filename": "ownership_initial_tree.parquet", "validation_schema": null, "engine": "SQL"}}, {"model": "metadata.stepdefinition", "pk": 11, "fields": {"workflow": 1, "order": 5, "sql_query": "select o.owner_number, o.owner_key \r\nFROM 'ownerships.parquet' o\r\nLEFT JOIN 'ownerships.parquet' p on p.company_number::STRING = o.owner_number and \r\n p.owner_type = 'J' AND p.ownership_size > 50\r\nwhere \r\np.company_number is null and p.owner_foreign_number is null\r\nAND o.ownership_size > 50  and o.owner_type = 'J' \r\ngroup by o.owner_number, o.owner_key", "result_filename": "consortiums.parquet", "validation_schema": null, "engine": "SQL"}}, {"model": "metadata.stepdefinition", "pk": 15, "fields": {"workflow": 1, "order": 11, "sql_query": "select \r\no.ownership_size as share_percentage, \r\nchild.id as child_party_id, \r\np.id as parent_party_id, \r\nentg.id as enterprise_group_id, \r\no.valid_from, \r\no.valid_to \r\nfrom ownerships.parquet o \r\nleft join 'ownership_tree.parquet' e on o.company_number::STRING = e.company_number::STRING \r\njoin companies.parquet c on c.company_code = o.company_number::STRING \r\njoin postgres_db.public.data_storage_party child on child.party_uniq_key = c.company_key \r\njoin postgres_db.public.data_storage_party p on p.party_uniq_key = o.owner_key \r\nleft join postgres_db.public.data_storage_party ent on ent.party_uniq_key = e.enterprise_owner_key\r\nleft join postgres_db.public.data_storage_enterprisegroup entg on ent.id = entg.group_head_id", "result_filename": "ownerships_for_db.parquet", "validation_schema": null, "engine": "SQL"}}, {"model": "metadata.stepdefinition", "pk": 16, "fields": {"workflow": 1, "order": 5, "sql_query": "select \r\nmin(case when c.company_name is not null then c.company_name else o.owner_name end) as name, \r\ncase when o.owner_type IS NULL THEN 'J' ELSE o.owner_type END as party_type,  \r\ncase when c.company_key is null then o.owner_key else c.company_key end as party_uniq_key \r\nfrom ownerships.parquet o \r\nfull outer join companies.parquet c on c.company_key::STRING = o.owner_key::STRING\r\ngroup by party_uniq_key, party_type", "result_filename": "parties.parquet", "validation_schema": null, "engine": "SQL"}}, {"model": "metadata.stepdefinition", "pk": 17, "fields": {"workflow": 1, "order": 6, "sql_query": "sync_with_postgres('postgres_db.public.data_storage_party', 'parties.parquet', add_only=True)", "result_filename": "data_storage_party", "validation_schema": null, "engine": "FUN"}}, {"model": "metadata.stepdefinition", "pk": 18, "fields": {"workflow": 1, "order": 7, "sql_query": "SELECT id as group_head_id FROM postgres_db.public.data_storage_party p JOIN  consortiums.parquet c ON p.party_uniq_key = c.owner_key", "result_filename": "enterprisegroups.parquet", "validation_schema": null, "engine": "SQL"}}, {"model": "metadata.stepdefinition", "pk": 19, "fields": {"workflow": 1, "order": 10, "sql_query": "sync_with_postgres('postgres_db.public.data_storage_enterprisegroup', 'enterprisegroups.parquet', add_only=True)", "result_filename": "data_storage_enterprisegroup", "validation_schema": null, "engine": "FUN"}}, {"model": "metadata.stepdefinition", "pk": 20, "fields": {"workflow": 1, "order": 12, "sql_query": "sync_with_postgres('postgres_db.public.data_storage_ownership', 'ownerships_for_db.parquet', add_only=True)", "result_filename": "data_storage_ownership", "validation_schema": null, "engine": "FUN"}}, {"model": "metadata.stepdefinition", "pk": 21, "fields": {"workflow": 1, "order": 7, "sql_query": "select \r\ncase when owner_number is not null then owner_number else owner_foreign_number end as identification_number,  \r\np.id as party_id\r\nfrom ownerships.parquet o\r\njoin postgres_db.public.data_storage_party p on p.party_uniq_key = o.owner_key\r\n where owner_type = 'F'", "result_filename": "physicalpersons.parquet", "validation_schema": null, "engine": "SQL"}}, {"model": "metadata.stepdefinition", "pk": 22, "fields": {"workflow": 1, "order": 8, "sql_query": "sync_with_postgres('postgres_db.public.data_storage_physicalperson', 'physicalpersons.parquet')", "result_filename": "data_storage_physicalperson", "validation_schema": null, "engine": "FUN"}}, {"model": "metadata.stepdefinition", "pk": 23, "fields": {"workflow": 1, "order": 7, "sql_query": "select \r\no.owner_number as registry_code,  \r\np.id as party_id,\r\no.owner_foreign_number as foreign_code,\r\no.owner_foreign_country as foreign_country_code\r\nfrom ownerships.parquet o\r\njoin postgres_db.public.data_storage_party p on p.party_uniq_key = o.owner_key\r\nleft join companies.parquet c on c.company_code::STRING = o.owner_number::STRING\r\n where o.owner_type = 'J'\r\nUNION \r\nSELECT \r\nc.company_code as registry_code,\r\np.id as party_id,\r\nNULL as foreign_code,\r\nNULL as foreign_country_code\r\nFROM companies.parquet c\r\nJOIN postgres_db.public.data_storage_party p on p.party_uniq_key = c.company_key", "result_filename": "legalpersons.parquet", "validation_schema": null, "engine": "SQL"}}, {"model": "metadata.stepdefinition", "pk": 24, "fields": {"workflow": 1, "order": 8, "sql_query": "sync_with_postgres('postgres_db.public.data_storage_legalperson', 'legalpersons.parquet', add_only=True)", "result_filename": "data_storage_legalperson", "validation_schema": null, "engine": "FUN"}}, {"model": "metadata.stepdefinition", "pk": 25, "fields": {"workflow": 1, "order": 15, "sql_query": "sync_with_postgres('postgres_db.public.data_storage_assets', 'assets.parquet', mapping={\"company_number CAST INTO STRING\": \"postgres_db.public.data_storage_legalperson.registry_code=legal_person_id\"})", "result_filename": "data_storage_assets", "validation_schema": null, "engine": "FUN"}}, {"model": "metadata.stepdefinition", "pk": 27, "fields": {"workflow": 1, "order": 20, "sql_query": "sync_with_postgres('postgres_db.public.data_storage_legalperson', 'legalpersons.parquet', add_only=False)", "result_filename": "data_storage_legalperson", "validation_schema": null, "engine": "FUN"}}, {"model": "metadata.stepdefinition", "pk": 28, "fields": {"workflow": 1, "order": 21, "sql_query": "sync_with_postgres('postgres_db.public.data_storage_ownership', 'ownerships_for_db.parquet', add_only=False)", "result_filename": "data_storage_ownership", "validation_schema": null, "engine": "FUN"}}, {"model": "metadata.stepdefinition", "pk": 29, "fields": {"workflow": 1, "order": 22, "sql_query": "sync_with_postgres('postgres_db.public.data_storage_enterprisegroup', 'enterprisegroups.parquet', add_only=False)", "result_filename": "data_storage_enterprisegroup", "validation_schema": null, "engine": "FUN"}}, {"model": "metadata.stepdefinition", "pk": 30, "fields": {"workflow": 1, "order": 23, "sql_query": "sync_with_postgres('postgres_db.public.data_storage_party', 'parties.parquet', add_only=False)", "result_filename": "data_storage_party", "validation_schema": null, "engine": "FUN"}}, {"model": "metadata.stepdefinition", "pk": 33, "fields": {"workflow": 2, "order": 2, "sql_query": "select o.id, any_value(party.name::STRING) as name, sum(a.assets_value::DECIMAL) as assets_value, o.group_head_id as enterprise_id from postgres_db.public.data_storage_enterprisegroup o\r\njoin postgres_db.public.data_storage_party party on party.id = o.group_head_id\r\njoin postgres_db.public.data_storage_legalperson legal on legal.party_id = party.id\r\nleft join postgres_db.public.data_storage_assets a on a.legal_person_id = legal.id\r\ngroup by o.id, o.group_head_id", "result_filename": "raport_enterprises.parquet", "validation_schema": null, "engine": "SQL"}}, {"model": "metadata.stepdefinition", "pk": 34, "fields": {"workflow": 2, "order": 3, "sql_query": "select o.child_party_id as id, child.name, o.enterprise_group_id as group_id,  o.share_percentage as share_percentage, a.assets_value as assets_value,  \r\no.parent_party_id as owner_id,\r\nowner.name  as owner_name\r\nfrom postgres_db.public.data_storage_ownership o\r\njoin postgres_db.public.data_storage_party child on child.id = o.child_party_id\r\njoin postgres_db.public.data_storage_legalperson legal on legal.party_id = child.id\r\nleft join postgres_db.public.data_storage_assets a on a.legal_person_id = legal.id\r\njoin postgres_db.public.data_storage_party owner on owner.id = o.parent_party_id\r\nwhere share_percentage > 50", "result_filename": "raport_companies.parquet", "validation_schema": null, "engine": "SQL"}}, {"model": "metadata.stepdefinition", "pk": 35, "fields": {"workflow": 2, "order": 4, "sql_query": "sync_with_postgres('postgres_db.public.raportid_enterprisegroups', 'raport_enterprises.parquet')", "result_filename": "None", "validation_schema": null, "engine": "FUN"}}, {"model": "metadata.stepdefinition", "pk": 36, "fields": {"workflow": 2, "order": 5, "sql_query": "sync_with_postgres('postgres_db.public.raportid_enterprises', 'raport_companies.parquet')", "result_filename": "None", "validation_schema": null, "engine": "FUN"}}, {"model": "metadata.stepdefinition", "pk": 39, "fields": {"workflow": 1, "order": -1, "sql_query": "SELECT pull_file('https://avaandmed.ariregister.rik.ee/sites/default/files/avaandmed/ettevotja_rekvisiidid__kandevalised_isikud.json.zip', 'ettevotja_rekvisiidid__kandevalised_isikud.json')", "result_filename": "ettevotja_rekvisiidid__kandevalised_isikud.json", "validation_schema": null, "engine": "SQL"}}, {"model": "metadata.stepdefinition", "pk": 43, "fields": {"workflow": 2, "order": 1, "sql_query": "select grant_privileges('raportid_enterprises', 'raportid_enterprisegroups')", "result_filename": "None", "validation_schema": null, "engine": "SQL"}}]