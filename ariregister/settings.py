"""
Django settings for ariregister project.

Generated by 'django-admin startproject' using Django 5.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""
import os
from pathlib import Path

from celery.schedules import crontab
from environ import Env

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Get env
ENV: Env = Env()

ENV.read_env(f'{BASE_DIR}/.env')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = ENV.str('SECRET_KEY', 'django-insecure-dp@hp!lx#k$^nubw&i=3_%hfmfkz^^&$_7zw902%o=yd+!58_b')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = ENV.bool('DEBUG', True)

ALLOWED_HOSTS = ENV.list('ALLOWED_HOSTS', default=[])

# CSRF
# https://docs.djangoproject.com/en/3.2/ref/csrf/
CSRF_TRUSTED_ORIGINS = ENV.list('CSRF_TRUSTED_ORIGINS', default=[])
CSRF_COOKIE_SAMESITE = 'Strict'
CSRF_COOKIE_HTTPONLY = False
CSRF_COOKIE_SECURE = True if not DEBUG else False

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_celery_beat',
    'data_storage',
    'metadata',
    'pgtrigger',
    'raportid',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'ariregister.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ariregister.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': ENV.str('DATABASE_ENGINE', 'django.db.backends.postgresql'),
        'NAME': ENV.str('DATABASE_NAME', 'ariregister'),
        'USER': ENV.str('DATABASE_USER', 'root'),
        'PASSWORD': ENV.str('DATABASE_PASSWORD', 'root'),
        'HOST': ENV.str('DATABASE_HOST', 'localhost'),
        'PORT': ENV.int('DATABASE_PORT', 5432)
    }
}

# DuckDB Postgres connection
os.environ['PGDATABASE'] = ENV.str('DATABASE_NAME', 'ariregister')
os.environ['PGUSER'] = ENV.str('DATABASE_USER', 'root')
os.environ['PGPASSWORD'] = ENV.str('DATABASE_PASSWORD', 'root')
os.environ['PGHOST'] = ENV.str('DATABASE_HOST', 'localhost')
os.environ['PGPORT'] = ENV.str('DATABASE_PORT', '5432')


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/
LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/
STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Celery
BROKER_URL = ENV.str('CELERY_BROKER_URL', 'redis://redis:6379')
CELERY_RESULT_BACKEND = ENV.str('CELERY_RESULT_BACKEND', 'redis://redis:6379')
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
# CELERY_TIMEZONE = 'Europe/Tallinn'
CELERYBEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'
CELERY_BEAT_SCHEDULE = {
    'run-every-hour': {
        'task': 'ariregister.tasks.task_1',
        'schedule': crontab(minute='0'),
    },
    'cleanup-workflows': {
        'task': 'metadata.tasks.cleanup_workflows',
        'schedule': crontab(minute='*/5'),
    },
    'run-workflows': {
        'task': 'metadata.tasks.run_workflows',
        'schedule': crontab(minute='0', hour='0'),
    },
}

# Logging
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "%(levelname)s %(asctime)s %(process)d %(module)s %(funcName)s %(message)s",
            "datefmt": "%d.%m.%Y %H:%M:%S"
        }
    },
    "handlers": {
        "console": {
            "level": "INFO",
            "class": "logging.StreamHandler",
            "formatter": "verbose",
        }
    },
    "root": {
        "level": ('INFO' if not DEBUG else 'DEBUG'),
        "handlers": ["console"]
    }
}

